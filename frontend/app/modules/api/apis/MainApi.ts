/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    BaseResponseModel,
    BuildEngineOptions,
    FileListResponseModel,
    GenerateImageResponseModel,
    HTTPValidationError,
    ImageGenerationOptions,
    ModelCurrentResponseModel,
    ModelListResponseModel,
    ModelModeResponseModel,
    PluginListResponseModel,
    SetModeRequest,
    SetModelRequest,
} from '../models'
import {
    BaseResponseModelFromJSON,
    BaseResponseModelToJSON,
    BuildEngineOptionsFromJSON,
    BuildEngineOptionsToJSON,
    FileListResponseModelFromJSON,
    FileListResponseModelToJSON,
    GenerateImageResponseModelFromJSON,
    GenerateImageResponseModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ImageGenerationOptionsFromJSON,
    ImageGenerationOptionsToJSON,
    ModelCurrentResponseModelFromJSON,
    ModelCurrentResponseModelToJSON,
    ModelListResponseModelFromJSON,
    ModelListResponseModelToJSON,
    ModelModeResponseModelFromJSON,
    ModelModeResponseModelToJSON,
    PluginListResponseModelFromJSON,
    PluginListResponseModelToJSON,
    SetModeRequestFromJSON,
    SetModeRequestToJSON,
    SetModelRequestFromJSON,
    SetModelRequestToJSON,
} from '../models'

export interface BuildEngineRequest {
    buildEngineOptions: BuildEngineOptions
}

export interface GenerateImageRequest {
    imageGenerationOptions: ImageGenerationOptions
}

export interface GetAllImageFilesRequest {
    category: string
    page: number
}

export interface GetImageRequest {
    category: string
    filename: string
}

export interface PluginRequest {
    pluginName: string
}

export interface SetModelOperationRequest {
    setModelRequest: SetModelRequest
}

export interface SetModelModeRequest {
    setModeRequest: SetModeRequest
}

export interface TrtAvailableRequest {
    modelId: string
}

/**
 *
 */
export class MainApi extends runtime.BaseAPI {
    /**
     * Build Engine
     */
    async buildEngineRaw(
        requestParameters: BuildEngineRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (
            requestParameters.buildEngineOptions === null ||
            requestParameters.buildEngineOptions === undefined
        ) {
            throw new runtime.RequiredError(
                'buildEngineOptions',
                'Required parameter requestParameters.buildEngineOptions was null or undefined when calling buildEngine.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        const response = await this.request(
            {
                path: `/api/engine/build`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: BuildEngineOptionsToJSON(requestParameters.buildEngineOptions),
            },
            initOverrides,
        )

        return new runtime.TextApiResponse(response) as any
    }

    /**
     * Build Engine
     */
    async buildEngine(
        requestParameters: BuildEngineRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.buildEngineRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Generate Image
     */
    async generateImageRaw(
        requestParameters: GenerateImageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GenerateImageResponseModel>> {
        if (
            requestParameters.imageGenerationOptions === null ||
            requestParameters.imageGenerationOptions === undefined
        ) {
            throw new runtime.RequiredError(
                'imageGenerationOptions',
                'Required parameter requestParameters.imageGenerationOptions was null or undefined when calling generateImage.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        const response = await this.request(
            {
                path: `/api/images/generate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ImageGenerationOptionsToJSON(requestParameters.imageGenerationOptions),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GenerateImageResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Generate Image
     */
    async generateImage(
        requestParameters: GenerateImageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GenerateImageResponseModel> {
        const response = await this.generateImageRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get All Image Files
     */
    async getAllImageFilesRaw(
        requestParameters: GetAllImageFilesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FileListResponseModel>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter requestParameters.category was null or undefined when calling getAllImageFiles.',
            )
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter requestParameters.page was null or undefined when calling getAllImageFiles.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/images/browser/{category}/{page}`
                    .replace(
                        `{${'category'}}`,
                        encodeURIComponent(String(requestParameters.category)),
                    )
                    .replace(`{${'page'}}`, encodeURIComponent(String(requestParameters.page))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            FileListResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Get All Image Files
     */
    async getAllImageFiles(
        requestParameters: GetAllImageFilesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FileListResponseModel> {
        const response = await this.getAllImageFilesRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get Current Model
     */
    async getCurrentModelRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ModelCurrentResponseModel>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/model/currnet`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ModelCurrentResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Get Current Model
     */
    async getCurrentModel(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ModelCurrentResponseModel> {
        const response = await this.getCurrentModelRaw(initOverrides)
        return await response.value()
    }

    /**
     * Get Image
     */
    async getImageRaw(
        requestParameters: GetImageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter requestParameters.category was null or undefined when calling getImage.',
            )
        }

        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter requestParameters.filename was null or undefined when calling getImage.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/images/browser/get/{category}/{filename}`
                    .replace(
                        `{${'category'}}`,
                        encodeURIComponent(String(requestParameters.category)),
                    )
                    .replace(
                        `{${'filename'}}`,
                        encodeURIComponent(String(requestParameters.filename)),
                    ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.TextApiResponse(response) as any
    }

    /**
     * Get Image
     */
    async getImage(
        requestParameters: GetImageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.getImageRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get Model Mode
     */
    async getModelModeRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ModelModeResponseModel>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/model/mode`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ModelModeResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Get Model Mode
     */
    async getModelMode(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ModelModeResponseModel> {
        const response = await this.getModelModeRaw(initOverrides)
        return await response.value()
    }

    /**
     * Get Models
     */
    async getModelsRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ModelListResponseModel>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/model/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ModelListResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Get Models
     */
    async getModels(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ModelListResponseModel> {
        const response = await this.getModelsRaw(initOverrides)
        return await response.value()
    }

    /**
     * Plugin
     */
    async pluginRaw(
        requestParameters: PluginRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PluginListResponseModel>> {
        if (requestParameters.pluginName === null || requestParameters.pluginName === undefined) {
            throw new runtime.RequiredError(
                'pluginName',
                'Required parameter requestParameters.pluginName was null or undefined when calling plugin.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/plugins/js/{plugin_name}`.replace(
                    `{${'plugin_name'}}`,
                    encodeURIComponent(String(requestParameters.pluginName)),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            PluginListResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Plugin
     */
    async plugin(
        requestParameters: PluginRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PluginListResponseModel> {
        const response = await this.pluginRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Plugin List
     */
    async pluginListRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PluginListResponseModel>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/plugins/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            PluginListResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Plugin List
     */
    async pluginList(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PluginListResponseModel> {
        const response = await this.pluginListRaw(initOverrides)
        return await response.value()
    }

    /**
     * Set Model
     */
    async setModelRaw(
        requestParameters: SetModelOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseResponseModel>> {
        if (
            requestParameters.setModelRequest === null ||
            requestParameters.setModelRequest === undefined
        ) {
            throw new runtime.RequiredError(
                'setModelRequest',
                'Required parameter requestParameters.setModelRequest was null or undefined when calling setModel.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        const response = await this.request(
            {
                path: `/api/model/current`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SetModelRequestToJSON(requestParameters.setModelRequest),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            BaseResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Set Model
     */
    async setModel(
        requestParameters: SetModelOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseResponseModel> {
        const response = await this.setModelRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Set Model Mode
     */
    async setModelModeRaw(
        requestParameters: SetModelModeRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseResponseModel>> {
        if (
            requestParameters.setModeRequest === null ||
            requestParameters.setModeRequest === undefined
        ) {
            throw new runtime.RequiredError(
                'setModeRequest',
                'Required parameter requestParameters.setModeRequest was null or undefined when calling setModelMode.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        const response = await this.request(
            {
                path: `/api/model/mode`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SetModeRequestToJSON(requestParameters.setModeRequest),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            BaseResponseModelFromJSON(jsonValue),
        )
    }

    /**
     * Set Model Mode
     */
    async setModelMode(
        requestParameters: SetModelModeRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseResponseModel> {
        const response = await this.setModelModeRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Trt Available
     */
    async trtAvailableRaw(
        requestParameters: TrtAvailableRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.modelId === null || requestParameters.modelId === undefined) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter requestParameters.modelId was null or undefined when calling trtAvailable.',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/model/{model_id}/trt_available`.replace(
                    `{${'model_id'}}`,
                    encodeURIComponent(String(requestParameters.modelId)),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.TextApiResponse(response) as any
    }

    /**
     * Trt Available
     */
    async trtAvailable(
        requestParameters: TrtAvailableRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.trtAvailableRaw(requestParameters, initOverrides)
        return await response.value()
    }
}
